generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Avatars {
  id         String   @id @default(uuid())
  user_id    String   @unique
  photo_url  String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
}

model User {
  id            String        @id @default(uuid())
  auth_id       String        @db.VarChar(255)
  email         String        @unique @db.VarChar(255)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  last_login_at DateTime      @default(now())
  name          String        @db.VarChar(255)
  last_name     String?       @db.VarChar(255)
  avatars       Avatars?
  Reviews       Reviews[]
  Ratings       Ratings[]
  TracksOrder   TracksOrder[]
}

model Albuns {
  id           String        @id @default(uuid())
  id_spotify   String?       @db.VarChar(255)
  artist_id    String        @db.VarChar(255)
  cover        String        @db.VarChar(255)
  tracks_count Int
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  name         String        @db.VarChar(255)
  release_date String?       @db.VarChar(255)
  Artist       Artists       @relation(fields: [artist_id], references: [id])
  artists      String[]
  Tracks       Tracks[]
  tags         String[]
  Reviews      Reviews[]
  Ratings      Ratings[]
  TracksOrder  TracksOrder[]
}

model Artists {
  id         String   @id @default(uuid())
  id_spotify String?  @db.VarChar(255)
  name       String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Albuns     Albuns[]
}

model Tracks {
  id                String        @id @default(uuid())
  id_spotify        String?       @db.VarChar(255)
  id_album          String        @db.VarChar(255)
  name              String        @db.VarChar(255)
  artists           String[]
  duration          Int
  position_original Int
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  Albuns            Albuns        @relation(fields: [id_album], references: [id])
  TracksOrder       TracksOrder[]
}

model Reviews {
  id         String    @id @default(uuid())
  id_album   String    @db.VarChar(255)
  id_user    String    @db.VarChar(255)
  review     String?   @db.Text()
  listen_at  DateTime  @default(now())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Album      Albuns    @relation(fields: [id_album], references: [id])
  User       User      @relation(fields: [id_user], references: [id])
  Ratings    Ratings[]
}

model Ratings {
  id         String   @id @default(uuid())
  id_album   String   @db.VarChar(255)
  id_user    String   @db.VarChar(255)
  id_review  String?  @db.VarChar(255)
  rating     Float    @db.DoublePrecision()
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Album      Albuns   @relation(fields: [id_album], references: [id])
  User       User     @relation(fields: [id_user], references: [id])
  Review     Reviews? @relation(fields: [id_review], references: [id])
}

model TracksOrder {
  id       String @id @default(uuid())
  id_album String @db.VarChar(255)
  id_user  String @db.VarChar(255)
  id_track String @db.VarChar(255)

  position Int    @db.Integer()
  User     User   @relation(fields: [id_user], references: [id])
  Albuns   Albuns @relation(fields: [id_album], references: [id])
  Track    Tracks @relation(fields: [id_track], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  
  @@unique([id_user, id_album, id_track])
  @@index([id_user, id_album, position])
}
